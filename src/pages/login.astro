---
import CleanLayout from '../layouts/CleanLayout.astro';

const message = Astro.url.searchParams.get('message');
---

<CleanLayout title="Login">
  <div class="max-w-md mx-auto mt-8">
    <div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md transform transition-all duration-300 hover:shadow-xl">
      <h1 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Login</h1>
      {message && (
        <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative">
          <span>{message}</span>
        </div>
      )}
      <form id="loginForm" class="space-y-4">
        <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <span class="message">Error message here</span>
        </div>
        <div class="input-group relative">
          <input
            type="email"
            id="email"
            name="email"
            required
            class="peer mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white px-4 py-2 transition-all duration-300"
            placeholder=" "
          />
          <label for="email" class="absolute left-2 top-2 text-gray-500 transition-all duration-300 transform -translate-y-4 scale-75 z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4 bg-white dark:bg-gray-800 px-2">
            Email
          </label>
        </div>
        <div class="input-group relative">
          <input
            type="password"
            id="password"
            name="password"
            required
            class="peer mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white px-4 py-2 transition-all duration-300"
            placeholder=" "
          />
          <label for="password" class="absolute left-2 top-2 text-gray-500 transition-all duration-300 transform -translate-y-4 scale-75 z-10 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4 bg-white dark:bg-gray-800 px-2">
            Password
          </label>
        </div>
        <div class="flex items-center justify-between">
          <a href="/forgot-password" class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400">
            Forgot your password?
          </a>
        </div>
        <button
          type="submit"
          class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform transition-all duration-300 hover:scale-105 active:scale-95"
        >
          Sign in
        </button>
        <p class="text-sm text-center text-gray-600 dark:text-gray-400">
          Don't have an account?
          <a href="/signup" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400">Sign up</a>
        </p>
      </form>
    </div>
  </div>
</CleanLayout>

<style>
  .input-group input:focus + label,
  .input-group input:not(:placeholder-shown) + label {
    @apply -translate-y-4 scale-75;
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
  }

  .shake {
    animation: shake 0.5s ease-in-out;
  }

  .success-animation {
    animation: success 0.5s ease-in-out;
  }

  @keyframes success {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
</style>

<script>
  import { login } from '../lib/authClient';

  const form = document.getElementById('loginForm') as HTMLFormElement;
  const errorDiv = document.getElementById('errorMessage')!;
  const errorMessage = errorDiv.querySelector('.message')!;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitButton = form.querySelector('button[type="submit"]');
    
    const email = (document.getElementById('email') as HTMLInputElement).value;
    const password = (document.getElementById('password') as HTMLInputElement).value;

    try {
      errorDiv.classList.add('hidden');
      submitButton?.classList.add('opacity-75', 'cursor-not-allowed');
      submitButton!.innerHTML = '<span class="inline-block animate-spin mr-2">â†»</span> Signing in...';
      const response = await login(email, password);
      window.location.href = '/'; // Redirect to home page after successful login
    } catch (error) {
      errorDiv.classList.remove('hidden');
      errorMessage.textContent = error instanceof Error ? error.message : 'An error occurred';
      form.classList.add('shake');
      setTimeout(() => form.classList.remove('shake'), 500);
    } finally {
      submitButton?.classList.remove('opacity-75', 'cursor-not-allowed');
      submitButton!.textContent = 'Sign in';
    }
  });

  // Add input animation handlers
  const inputs = document.querySelectorAll('input');
  inputs.forEach(input => {
    input.addEventListener('focus', () => {
      input.parentElement?.classList.add('scale-105');
    });
    
    input.addEventListener('blur', () => {
      input.parentElement?.classList.remove('scale-105');
    });
  });
</script>
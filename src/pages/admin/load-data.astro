---
import Layout from '../../layouts/Layout.astro';
import { dataLoader } from '../../lib/dataLoader';

const progress = dataLoader.getProgress();
---

<Layout title="Load Data">
  <div class="min-h-screen bg-gray-100 dark:bg-gray-900 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
          <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"/>
          </svg>
          Data Loading Dashboard
        </h1>

        <!-- Main Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
            <div class="text-blue-600 dark:text-blue-400 text-sm font-medium">Total Manga</div>
            <div id="total" class="text-2xl font-bold text-blue-700 dark:text-blue-300">{progress.total}</div>
          </div>
          
          <div class="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
            <div class="text-green-600 dark:text-green-400 text-sm font-medium">Successfully Loaded</div>
            <div id="loaded" class="text-2xl font-bold text-green-700 dark:text-green-300">{progress.loadedCount}</div>
          </div>
          
          <div class="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg">
            <div class="text-red-600 dark:text-red-400 text-sm font-medium">Failed</div>
            <div id="failed" class="text-2xl font-bold text-red-700 dark:text-red-300">{progress.failedCount}</div>
          </div>
          
          <div class="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
            <div class="text-purple-600 dark:text-purple-400 text-sm font-medium">Processing Speed</div>
            <div id="speed" class="text-2xl font-bold text-purple-700 dark:text-purple-300">0/s</div>
          </div>
        </div>

        <!-- Progress Section -->
        <div class="mb-6">
          <div class="flex justify-between items-center mb-2">
            <span id="status" class="text-sm font-medium text-gray-700 dark:text-gray-300">
              {progress.isLoading ? 'Loading...' : 'Ready'}
            </span>
            <span id="percentage" class="text-sm font-medium text-blue-600 dark:text-blue-400">0%</span>
          </div>
          <div class="relative pt-1">
            <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-blue-200 dark:bg-blue-900/20">
              <div
                id="progressBar"
                style={`width: ${progress.current}%`}
                class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500 transition-all duration-300"
              ></div>
            </div>
          </div>
        </div>

        <!-- Live Log Console -->
        <div class="mb-6">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Live Processing Log</h3>
          <div id="logConsole" class="bg-gray-900 text-gray-100 rounded-lg p-4 h-64 overflow-y-auto font-mono text-sm">
            <div class="text-gray-400">Waiting to start processing...</div>
          </div>
        </div>

        <!-- Current Manga Details -->
        <div id="currentMangaDetails" class="mb-6 hidden">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Currently Processing</h3>
          <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
            <div class="flex items-start space-x-4">
              <div id="mangaCover" class="w-24 h-32 bg-gray-200 dark:bg-gray-600 rounded-lg"></div>
              <div class="flex-1">
                <h4 id="mangaTitle" class="text-lg font-medium text-gray-900 dark:text-white"></h4>
                <p id="mangaDesc" class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2"></p>
                <div class="mt-2 grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span class="text-gray-500 dark:text-gray-400">Chapters: </span>
                    <span id="chapterCount" class="font-medium text-gray-900 dark:text-white"></span>
                  </div>
                  <div>
                    <span class="text-gray-500 dark:text-gray-400">Pages: </span>
                    <span id="pageCount" class="font-medium text-gray-900 dark:text-white"></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex space-x-4">
          <button
            id="loadDataBtn"
            class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
            disabled={progress.isLoading}
          >
            <span class="flex items-center justify-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
              </svg>
              {progress.isLoading ? 'Loading in progress...' : 'Start Loading Data'}
            </span>
          </button>
          
          <button
            id="cancelBtn"
            class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
            disabled={!progress.isLoading}
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const loadDataBtn = document.getElementById('loadDataBtn');
  const statusEl = document.getElementById('status');
  const totalEl = document.getElementById('total');
  const loadedEl = document.getElementById('loaded');
  const failedEl = document.getElementById('failed');
  const progressBarEl = document.getElementById('progressBar');
  const errorContainerEl = document.getElementById('errorContainer');
  const lastErrorEl = document.getElementById('lastError');
  
  let processedItems = 0;
  let startTime = Date.now();
  const speedEl = document.getElementById('speed');
  const percentageEl = document.getElementById('percentage');
  const logConsoleEl = document.getElementById('logConsole');
  const currentMangaDetailsEl = document.getElementById('currentMangaDetails');
  const mangaCoverEl = document.getElementById('mangaCover');
  const mangaTitleEl = document.getElementById('mangaTitle');
  const mangaDescEl = document.getElementById('mangaDesc');
  const chapterCountEl = document.getElementById('chapterCount');
  const pageCountEl = document.getElementById('pageCount');

  function addLogMessage(message: string, type: 'info' | 'success' | 'error' = 'info') {
    if (!logConsoleEl) return;

    const colors = {
      info: 'text-blue-400',
      success: 'text-green-400',
      error: 'text-red-400'
    };

    const logEntry = document.createElement('div');
    logEntry.className = `${colors[type as keyof typeof colors]} mb-1`;
    logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
    
    logConsoleEl.appendChild(logEntry);
    logConsoleEl.scrollTop = logConsoleEl.scrollHeight;
  }

  type Manga = {
    title: string;
    description: string;
    coverUrl?: string;
    chapters?: { pages?: number[] }[];
  };

  function updateCurrentManga(manga: Manga) {
    if (!currentMangaDetailsEl) return;

    currentMangaDetailsEl.classList.remove('hidden');
    if (mangaCoverEl && manga.coverUrl) {
      mangaCoverEl.style.backgroundImage = `url(${manga.coverUrl})`;
      mangaCoverEl.style.backgroundSize = 'cover';
      mangaCoverEl.style.backgroundPosition = 'center';
    }
    if (mangaTitleEl) mangaTitleEl.textContent = manga.title;
    if (mangaDescEl) mangaDescEl.textContent = manga.description;
    if (chapterCountEl) chapterCountEl.textContent = (manga.chapters?.length || '0').toString();
    if (pageCountEl) {
      const totalPages = manga.chapters?.reduce((sum: number, ch) => sum + (ch.pages?.length || 0), 0) || 0;
      pageCountEl.textContent = totalPages.toString();
    }
  }

  async function updateProgress() {
    try {
      const response = await fetch('/api/admin/load-progress');
      const data = await response.json();
      
      if (data.success && data.progress) {
        const { isLoading, total, loadedCount, failedCount, current, lastError, currentManga } = data.progress;
        
        // Update status
        if (statusEl) {
          statusEl.textContent = isLoading ? 'Loading...' : 'Ready';
          statusEl.className = `font-semibold ${isLoading ? 'text-yellow-500' : 'text-green-500'}`;
        }
        
        // Update counts
        if (totalEl) totalEl.textContent = total;
        if (loadedEl) loadedEl.textContent = loadedCount;
        if (failedEl) failedEl.textContent = failedCount;
        
        // Update progress bar
        if (progressBarEl) {
          progressBarEl.style.width = `${current}%`;
        }
        
        // Update error message
        if (errorContainerEl && lastErrorEl) {
          if (lastError) {
            errorContainerEl.classList.remove('hidden');
            lastErrorEl.textContent = lastError;
          } else {
            errorContainerEl.classList.add('hidden');
          }
        }
        
        // Update button state
        if (loadDataBtn instanceof HTMLButtonElement) {
          loadDataBtn.disabled = isLoading;
          loadDataBtn.textContent = isLoading ? 'Loading in progress...' : 'Start Loading Data';
        }

        // Update processing speed
        if (isLoading && speedEl) {
          const elapsedSeconds = (Date.now() - startTime) / 1000;
          const itemsPerSecond = (loadedCount / elapsedSeconds).toFixed(1);
          speedEl.textContent = `${itemsPerSecond}/s`;
        }

        // Update percentage
        if (percentageEl) {
          percentageEl.textContent = `${Math.round(current)}%`;
        }

        // Update current manga details if available
        if (currentManga) {
          updateCurrentManga(currentManga);
          addLogMessage(`Processing: ${currentManga.title}`, 'info');
        }

        if (isLoading) {
          setTimeout(updateProgress, 1000);
        } else {
          addLogMessage('Processing completed!', 'success');
          currentMangaDetailsEl?.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error updating progress:', error);
      if (error instanceof Error) {
        addLogMessage(`Error: ${error.message}`, 'error');
      } else {
        addLogMessage('An unknown error occurred.', 'error');
      }
    }
  }

  if (loadDataBtn) {
    loadDataBtn.addEventListener('click', async () => {
      try {
        if (loadDataBtn instanceof HTMLButtonElement) {
          loadDataBtn.disabled = true;
          loadDataBtn.textContent = 'Loading in progress...';
          
          const response = await fetch('/api/admin/load-initial-data', {
            method: 'POST'
          });
        }
        const response = await fetch('/api/admin/load-initial-data', {
          method: 'POST'
        });
        
        if (!response.ok) {
          throw new Error('Failed to start data load');
        }
        
        // Start progress updates
        updateProgress();
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to start data load: ' + error.message);
        if (loadDataBtn instanceof HTMLButtonElement) {
          loadDataBtn.disabled = false;
          loadDataBtn.textContent = 'Start Loading Data';
        }
      }
    });
    
    // Start progress updates if already loading
    if (statusEl?.textContent === 'Loading...') {
      updateProgress();
    }
  }

  // Update cancel button handler
  document.getElementById('cancelBtn')?.addEventListener('click', async () => {
    try {
      await fetch('/api/admin/cancel-load', { method: 'POST' });
      addLogMessage('Processing cancelled by user', 'info');
    } catch (error) {
      console.error('Error cancelling load:', error);
      addLogMessage(`Error: ${error.message}`, 'error');
    }
  });
</script>
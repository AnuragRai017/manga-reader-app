---
import Layout from '../../layouts/Layout.astro';
import { mangadex } from '../../lib/mangadex';

// Get any failed syncs
const failedSyncs = mangadex.getFailedSyncs();
---

<Layout title="Manga Sync Admin">
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">Manga Sync Admin</h1>

      <!-- Failed Syncs Section -->
      {failedSyncs.length > 0 && (
        <div class="mb-8 bg-red-50 dark:bg-red-900/20 rounded-lg p-6">
          <h2 class="text-lg font-medium text-red-800 dark:text-red-200 mb-4">Failed Syncs</h2>
          <div class="space-y-2">
            {failedSyncs.map(id => (
              <div class="flex items-center justify-between">
                <span class="text-red-700 dark:text-red-300">{id}</span>
                <button
                  data-manga-id={id}
                  class="retry-button px-3 py-1 text-sm text-red-700 dark:text-red-300 border border-red-300 rounded-md hover:bg-red-100 dark:hover:bg-red-900/40"
                >
                  Retry
                </button>
              </div>
            ))}
            <button
              id="retryAllButton"
              class="mt-4 w-full px-4 py-2 text-sm font-medium text-red-700 dark:text-red-300 border border-red-300 rounded-md hover:bg-red-100 dark:hover:bg-red-900/40"
            >
              Retry All Failed Syncs
            </button>
          </div>
        </div>
      )}

      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <form id="syncForm" class="space-y-6">
          <div>
            <label for="offset" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Offset</label>
            <input
              type="number"
              id="offset"
              name="offset"
              min="0"
              value="0"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
          </div>

          <div>
            <label for="limit" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Limit</label>
            <input
              type="number"
              id="limit"
              name="limit"
              min="1"
              max="100"
              value="10"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
          </div>

          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Include Additional Data</label>
            <div class="space-y-1">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="includeStats"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Statistics & Ratings</span>
              </label>
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="includeRelated"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Related Manga</span>
              </label>
            </div>
          </div>

          <button
            type="submit"
            class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Start Sync
          </button>
        </form>

        <!-- Progress Section -->
        <div id="progress" class="mt-8 hidden">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Progress</h2>
          
          <div class="space-y-4">
            <div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-4">
              <div class="flex justify-between mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Status:</span>
                <span id="status" class="text-sm text-gray-900 dark:text-white">Initializing...</span>
              </div>
              <div class="flex justify-between mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Manga Processed:</span>
                <span id="mangaCount" class="text-sm text-gray-900 dark:text-white">0</span>
              </div>
              <div class="flex justify-between mb-2">
                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Cache Size:</span>
                <span id="cacheSize" class="text-sm text-gray-900 dark:text-white">0 chapters</span>
              </div>
            </div>

            <!-- Log Section -->
            <div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-4">
              <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-2">Log</h3>
              <div id="log" class="h-64 overflow-y-auto text-sm text-gray-600 dark:text-gray-400 space-y-1">
                <!-- Log entries will be added here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const form = document.getElementById('syncForm') as HTMLFormElement;
  const progress = document.getElementById('progress') as HTMLDivElement;
  const status = document.getElementById('status') as HTMLSpanElement;
  const mangaCount = document.getElementById('mangaCount') as HTMLSpanElement;
  const cacheSize = document.getElementById('cacheSize') as HTMLSpanElement;
  const log = document.getElementById('log') as HTMLDivElement;
  const retryAllButton = document.getElementById('retryAllButton');

  function addLogEntry(message: string, type: 'info' | 'success' | 'error' = 'info') {
    const entry = document.createElement('div');
    entry.className = `py-1 ${
      type === 'error' ? 'text-red-600 dark:text-red-400' :
      type === 'success' ? 'text-green-600 dark:text-green-400' :
      'text-gray-600 dark:text-gray-400'
    }`;
    entry.textContent = message;
    log.appendChild(entry);
    log.scrollTop = log.scrollHeight;
  }

  // Handle retry buttons
  document.querySelectorAll('.retry-button').forEach(button => {
    button.addEventListener('click', async () => {
      const mangaId = (button as HTMLButtonElement).dataset.mangaId;
      if (!mangaId) return;

      try {
        button.setAttribute('disabled', 'true');
        button.textContent = 'Retrying...';

        const response = await fetch('/api/admin/retry-sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ mangaId }),
        });

        const data = await response.json();

        if (data.success) {
          button.closest('div')?.remove();
          addLogEntry(`Successfully retried sync for manga ${mangaId}`, 'success');
        } else {
          addLogEntry(`Failed to retry sync for manga ${mangaId}: ${data.error}`, 'error');
        }
      } catch (error) {
        addLogEntry(`Error retrying sync: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
      } finally {
        button.removeAttribute('disabled');
        button.textContent = 'Retry';
      }
    });
  });

  // Handle retry all button
  retryAllButton?.addEventListener('click', async () => {
    try {
      retryAllButton.setAttribute('disabled', 'true');
      retryAllButton.textContent = 'Retrying All...';

      const response = await fetch('/api/admin/retry-all-syncs', {
        method: 'POST',
      });

      const data = await response.json();

      if (data.success) {
        addLogEntry(`Successfully retried all failed syncs`, 'success');
        // Remove all failed sync entries
        document.querySelectorAll('.retry-button').forEach(button => {
          button.closest('div')?.remove();
        });
      } else {
        addLogEntry(`Failed to retry all syncs: ${data.error}`, 'error');
      }
    } catch (error) {
      addLogEntry(`Error retrying all syncs: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
    } finally {
      retryAllButton.removeAttribute('disabled');
      retryAllButton.textContent = 'Retry All Failed Syncs';
    }
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const offset = parseInt((document.getElementById('offset') as HTMLInputElement).value);
    const limit = parseInt((document.getElementById('limit') as HTMLInputElement).value);
    const includeStats = (document.querySelector('input[name="includeStats"]') as HTMLInputElement).checked;
    const includeRelated = (document.querySelector('input[name="includeRelated"]') as HTMLInputElement).checked;

    // Show progress section
    progress.classList.remove('hidden');
    status.textContent = 'Sync in progress...';
    mangaCount.textContent = '0';
    cacheSize.textContent = '0 chapters';
    log.innerHTML = '';
    addLogEntry('Starting sync process...', 'info');

    try {
      const response = await fetch('/api/admin/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          offset,
          limit,
          includeStats,
          includeRelated,
        }),
      });

      const data = await response.json();

      if (data.success) {
        status.textContent = 'Completed';
        mangaCount.textContent = data.results.length.toString();
        cacheSize.textContent = `${data.cacheSize || 0} chapters`;
        addLogEntry(`Successfully synced ${data.results.length} manga`, 'success');

        // Log individual results
        data.results.forEach((result: any) => {
          if (result.status === 'success') {
            const details = [];
            if (result.rating) details.push(`Rating: ${result.rating.toFixed(2)}`);
            if (result.follows) details.push(`Follows: ${result.follows}`);
            
            addLogEntry(
              `✓ ${result.title} (${result.chaptersCount} chapters${details.length ? `, ${details.join(', ')}` : ''})`,
              'success'
            );
          } else {
            addLogEntry(`✗ Failed to sync manga ${result.id}: ${result.error}`, 'error');
          }
        });
      } else {
        status.textContent = 'Failed';
        addLogEntry(`Error: ${data.message}`, 'error');
      }
    } catch (error) {
      status.textContent = 'Failed';
      addLogEntry(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
    }
  });
</script> 
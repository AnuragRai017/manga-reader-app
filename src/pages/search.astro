---
import Layout from '../layouts/Layout.astro';
import MangaCard from '../components/MangaCard.astro';
import { connectDB, closeDB } from '../lib/db';
import type { Manga } from '../types/manga';
import type { WithId } from 'mongodb';

const query = Astro.url.searchParams.get('q') || '';
const selectedGenres = Astro.url.searchParams.getAll('genre');
const selectedStatus = Astro.url.searchParams.get('status');

// Define available filters
const genres = [
  'Action', 'Adventure', 'Comedy', 'Drama', 'Fantasy',
  'Horror', 'Mystery', 'Romance', 'Sci-Fi', 'Slice of Life',
  'Sports', 'Supernatural', 'Thriller'
];

const statuses = [
  { value: 'ongoing', label: 'Ongoing' },
  { value: 'completed', label: 'Completed' },
  { value: 'hiatus', label: 'On Hiatus' }
];

let results: WithId<Manga>[] = [];

if (query || selectedGenres.length > 0 || selectedStatus) {
  const db = await connectDB();
  const mangaCollection = db.collection<Manga>('manga');

  // Build query conditions
  const queryConditions: any[] = [];

  // Text search condition
  if (query.trim()) {
    queryConditions.push({
      $text: { 
        $search: query,
        $caseSensitive: false,
        $diacriticSensitive: false
      }
    });
  }

  // Genre filter
  if (selectedGenres.length > 0) {
    queryConditions.push({
      genres: { $all: selectedGenres }
    });
  }

  // Status filter
  if (selectedStatus) {
    queryConditions.push({
      status: selectedStatus
    });
  }

  // Combine all conditions
  const finalQuery = queryConditions.length > 0
    ? { $and: queryConditions }
    : {};

  results = await mangaCollection
    .find<Manga>(finalQuery)
    .project<Manga>({
      ...(query.trim() ? { score: { $meta: 'textScore' } } : {}),
      title: 1,
      author: 1,
      coverImage: 1,
      description: 1,
      status: 1,
      genres: 1
    })
    .sort(query.trim() ? { score: { $meta: 'textScore' } } : { title: 1 })
    .limit(20)
    .toArray();

  await closeDB();
}

// Helper function to build URL with updated params
function buildFilterUrl(updates: Record<string, string | string[] | null>) {
  const currentUrl = new URL(Astro.url);
  Object.entries(updates).forEach(([key, value]) => {
    currentUrl.searchParams.delete(key);
    if (Array.isArray(value)) {
      value.forEach(v => currentUrl.searchParams.append(key, v));
    } else if (value !== null) {
      currentUrl.searchParams.set(key, value);
    }
  });
  return currentUrl.toString();
}
---

<Layout title={`Search Results for "${query}"`}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row gap-8">
      <!-- Filters Sidebar -->
      <div class="w-full md:w-64 space-y-6">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Filters</h2>
          
          <!-- Status Filter -->
          <div class="mb-6">
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Status</h3>
            <div class="space-y-2">
              {statuses.map(({ value, label }) => (
                <label class="flex items-center">
                  <input
                    type="radio"
                    name="status"
                    value={value}
                    checked={selectedStatus === value}
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                    onclick={`window.location.href='${buildFilterUrl({ status: value })}'`}
                  />
                  <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">{label}</span>
                </label>
              ))}
              {selectedStatus && (
                <button
                  onclick={`window.location.href='${buildFilterUrl({ status: null })}'`}
                  class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400"
                >
                  Clear Status
                </button>
              )}
            </div>
          </div>

          <!-- Genre Filter -->
          <div>
            <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Genres</h3>
            <div class="space-y-2">
              {genres.map(genre => (
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    value={genre}
                    checked={selectedGenres.includes(genre)}
                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    onclick={`window.location.href='${buildFilterUrl({
                      genre: selectedGenres.includes(genre)
                        ? selectedGenres.filter(g => g !== genre)
                        : [...selectedGenres, genre]
                    })}'`}
                  />
                  <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">{genre}</span>
                </label>
              ))}
              {selectedGenres.length > 0 && (
                <button
                  onclick={`window.location.href='${buildFilterUrl({ genre: [] })}'`}
                  class="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400"
                >
                  Clear Genres
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <!-- Results Section -->
      <div class="flex-1">
        <div class="mb-8">
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            Search Results {query && `for "${query}"`}
          </h1>
          <div class="text-gray-600 dark:text-gray-400 space-y-2">
            <p>Found {results.length} manga</p>
            {(selectedGenres.length > 0 || selectedStatus) && (
              <div class="flex flex-wrap gap-2">
                {selectedGenres.map(genre => (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {genre}
                    <button
                      onclick={`window.location.href='${buildFilterUrl({
                        genre: selectedGenres.filter(g => g !== genre)
                      })}'`}
                      class="ml-1 text-blue-600 hover:text-blue-500"
                    >
                      ×
                    </button>
                  </span>
                ))}
                {selectedStatus && (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    {statuses.find(s => s.value === selectedStatus)?.label}
                    <button
                      onclick={`window.location.href='${buildFilterUrl({ status: null })}'`}
                      class="ml-1 text-green-600 hover:text-green-500"
                    >
                      ×
                    </button>
                  </span>
                )}
              </div>
            )}
          </div>
        </div>

        {results.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {results.map((manga) => <MangaCard manga={manga} />)}
          </div>
        ) : (
          <div class="text-center py-12">
            <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-4">
              No Results Found
            </h2>
            <p class="text-gray-600 dark:text-gray-400 mb-8">
              We couldn't find any manga matching your criteria. Try adjusting your filters or browse our collection.
            </p>
            <a
              href="/browse"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Browse All Manga
            </a>
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Handle browser back/forward navigation
  window.addEventListener('popstate', () => {
    window.location.reload();
  });
</script> 